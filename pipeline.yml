trigger:
  branches:
    include:
      - development
      - main

pr:
  branches:
    include:
      - "*"

variables:
  - name: BuildPlatform
    value: "Any CPU"
  - name: BuildConfiguration
    value: "Release"
  - group: 'Azure-pipeline-agents'
  
################################################################################################
##    >>>>>>>>>>>>>>>>>>>     Getting the latest Versions   <<<<<<<<<<<<<<<<<<<               ##
################################################################################################
stages:
- stage: Get_Latest_Versions
  pool: "Azure Pipelines"
  jobs:
  - job: "Getting_the_versions" 
    steps:
    - task: PowerShell@2
      inputs:
        targetType: 'inline'
        script: |
          $releases = Invoke-RestMethod -Uri 'https://api.github.com/repos/actions/runner-images/releases'

          $win22_latest = $releases | Where-Object { $_.tag_name -like 'win22/*' } | Sort-Object -Property published_at -Descending | Select-Object -First 1
          Write-Host $win22_latest.tag_name
          Write-Host "##vso[task.setvariable variable=win22;isOutput=true]$($win22_latest.tag_name)"
          
          
          $win19_latest = $releases | Where-Object { $_.tag_name -like 'win19/*' } | Sort-Object -Property published_at -Descending | Select-Object -First 1
          Write-Host $win19_latest.tag_name
          Write-Host "##vso[task.setvariable variable=win19;isOutput=true]$($win19_latest.tag_name)"
        
          
          $ubuntu20_latest = $releases | Where-Object { $_.tag_name -like 'ubuntu20/*' } | Sort-Object -Property published_at -Descending | Select-Object -First 1
          Write-Host $ubuntu20_latest.tag_name
          Write-Host "##vso[task.setvariable variable=ubuntu20;isOutput=true]$($ubuntu20_latest.tag_name)"


          $ubuntu22_latest = $releases | Where-Object { $_.tag_name -like 'ubuntu22/*' } | Sort-Object -Property published_at -Descending | Select-Object -First 1
          Write-Host $ubuntu22_latest.tag_name
          Write-Host "##vso[task.setvariable variable=ubuntu22;isOutput=true]$($ubuntu22_latest.tag_name)"
        workingDirectory: '$(System.ArtifactsDirectory)'
      name: ImageVersions

################################################################################################
##    >>>>>>>>>>>>>>>>>>>       Building Minimal Images     <<<<<<<<<<<<<<<<<<<               ##
################################################################################################


############################################################
##     *********  Ubuntu 20 min  **********               ##
############################################################

- stage: Run_ubuntu20_min_Image
  dependsOn: Get_Latest_Versions
  pool: "Azure Pipelines"
  jobs:
  - job: "Checking_the_Gallery_Latest_ubuntu20_min_Image_version" 
    variables:
      ubuntu20: $[stageDependencies.Get_Latest_Versions.Getting_the_versions.outputs['ImageVersions.ubuntu20']]
    steps:

    - task: PowerShell@2
      inputs:
        targetType: 'inline'
        script: |
          Write-Host $(ubuntu20)
          $splitString = "$(ubuntu20)" -split "/"
          $distro = $splitString[0]
          $version = $splitString[1]
          Write-Output "distro = `"$distro`""
          Write-Output "version = `"$version`""
          Connect-AzAccount -Identity
          Set-AzContext -Subscription $(subscription)
          $imageVersion= Get-AzGalleryImageVersion -ResourceGroupName $(image_resource_group_name) -GalleryName $(gallery_name) -GalleryImageDefinitionName "ubuntu20_minimal" -GalleryImageVersionName "0.*" | Select-Object -ExpandProperty Name | Sort-Object -Descending | Select-Object -First 1
          if ($imageVersion -eq "0.$($version)") {
              Write-Host "Image $imageVersion Already exists on the Gallery"
               echo "##vso[task.complete result=Canceled;]DONE"         
          } 
          else {
              echo "##vso[task.setvariable variable=u20_doRUN;isOutput=true]Yes" #set variable u20_doRUN to Yes
          }
      name: DetermineResult
  - job: "Getting_the_Latest_ubuntu20_min_Image" 
    dependsOn: "Checking_the_Gallery_Latest_ubuntu20_min_Image_version"
    condition: or(eq(dependencies.Checking_the_Gallery_Latest_ubuntu20_min_Image_version.outputs['DetermineResult.u20_doRUN'], 'Yes'), eq(variables['u20_min_cus'], 'True'))
    timeoutInMinutes: 720
    variables:
      ubuntu20: $[stageDependencies.Get_Latest_Versions.Getting_the_versions.outputs['ImageVersions.ubuntu20']]
    steps:
    - task: PowerShell@2
      inputs:
        filePath: '$(Build.SourcesDirectory)/psScripts/Getting_the_latest_u20_min_image.ps1'

    - task: PackerBuild@1
      inputs:
        templateType: 'custom'
        customTemplateLocation: '$(System.ArtifactsDirectory)/images/$(ubuntu20)/images/linux/ubuntu2004_min-ed.json'
        customTemplateParameters: |
          {
            "ssh_password": "adsfdjkl", 
            "install_password": "Max$3cr3t!"
          }
        packerVersion: '1.8.7'
